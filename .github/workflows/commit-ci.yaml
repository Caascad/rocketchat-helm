name: On commit CI

on: [push]

jobs: 
  test-helm: 
    env:
      HELM_REPO: "${{ github.repository }}" # This repo
      TESTS_REPO: RocketChat/rocketchat-release-tests
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
      - name: Parse environment variables
        run: |
          export ROCKETCHAT_VERSION=${{ github.event.push.sha }}
          echo "ROCKETCHAT_VERSION=$ROCKETCHAT_VERSION" >> $GITHUB_ENV
          [[ -z "$(echo ${{ env.ROCKETCHAT_VERSION }} | grep rc)" ]] && echo "CANDIDATE=false" >> $GITHUB_ENV
      - name: Clone helm repo (master)
        uses: actions/checkout@v2
        with:
          repository: "${{ env.HELM_REPO }}"
          path: './helm-charts'

      - name: Clone tests repo
        uses: actions/checkout@v2
        with:
          repository: "${{ env.TESTS_REPO }}"
          path: './test_scripts'
      
      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Pull dependencies
        run: helm dependency update ./helm-charts/rocketchat

      - name: Generate helm package
        run: helm package ./helm-charts/rocketchat # && cp rocketchat-${{ env.ROCKETCHAT_VERSION }}.tgz gh-pages/charts/

      # - name: Install helm package
      #   run: helm install --set mongodb.auth.username=rocketchat,mongodb.auth.password=testpass,mongodb.auth.database=rocketchat,mongodb.auth.rootPassword=root-testpass test-install-rocketchat rocketchat-${{ env.ROCKETCHAT_VERSION }}.tgz

      # - name: Test helm installation
      #   run: helm test --logs test-install-rocketchat

      - name: Test helm installation
        run: |
          helm install --set mongodb.auth.username=rocketchat,mongodb.auth.password=testpass,mongodb.auth.database=rocketchat,mongodb.auth.rootPassword=root-testpass test-install-rocketchat rocketchat-*.tgz
          echo waiting for pod to be created
          sleep 80
          timeout 360 kubectl port-forward --pod-running-timeout=1m0s --namespace default $(kubectl get pods --namespace default -l "app.kubernetes.io/name=rocketchat,app.kubernetes.io/instance=test-install-rocketchat" -o jsonpath='{ .items[0].metadata.name }') 8888:3000 &
          sleep 5
          kubectl logs $(kubectl get pods --namespace default -l "app.kubernetes.io/name=rocketchat,app.kubernetes.io/instance=test-install-rocketchat" -o jsonpath='{ .items[0].metadata.name }')
          kubectl get svc
          kubectl describe $(kubectl get pods --namespace default -l "app.kubernetes.io/name=rocketchat,app.kubernetes.io/instance=test-install-rocketchat" -o jsonpath='{ .items[0].metadata.name }')
          ./test_scripts/wait_http.sh http://127.0.0.1:8888
          . ./test_scripts/basic_test.sh http://127.0.0.1:8888
          helm test --logs test-install-rocketchat

          echo "Seeing if information persisted across updates"
          test_endpoint "$base_url/api/v1/channels.messages?roomId=GENERAL" -H "$userId" -H "$authToken"
          if [[ "$response" != *"This is a test message from $TEST_USER"* ]]; then
            echo "Couldn't find sent message. Something is wrong!"
            exit 2
          fi

          echo "Tests passed!"

      - name: (Microservices) Test helm installation
        run: |
          helm install --namespace microservices --set microservices.enabled=true,mongodb.auth.username=rocketchat,mongodb.auth.password=testpass,mongodb.auth.database=rocketchat,mongodb.auth.rootPassword=root-testpass test-install-rocketchat-microservices rocketchat-*.tgz
          echo waiting for pod to be created
          sleep 80
          timeout 360 kubectl port-forward --pod-running-timeout=1m0s --namespace microservices $(kubectl get pods --namespace microservices -l "app.kubernetes.io/name=rocketchat,app.kubernetes.io/instance=test-install-rocketchat-microservices" -o jsonpath='{ .items[0].metadata.name }') 8889:3000 &
          sleep 5
          ./test_scripts/wait_http.sh http://127.0.0.1:8889
          . ./test_scripts/basic_test.sh http://127.0.0.1:8889
          helm test --namespace microservices --logs test-install-rocketchat-microservices

          echo "Seeing if information persisted across updates"
          test_endpoint "$base_url/api/v1/channels.messages?roomId=GENERAL" -H "$userId" -H "$authToken"
          if [[ "$response" != *"This is a test message from $TEST_USER"* ]]; then
            echo "Couldn't find sent message. Something is wrong!"
            exit 2
          fi

          echo "Tests passed!"
                