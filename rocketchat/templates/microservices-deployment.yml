#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# ROCKET.CHAT TECHNOLOGY CORP. - Microservices K8s Manifests          #
# Diego Sampaio - Created (circa August 2021) / Priv. Repo            #
# Pedro T. R. Pinheiro - Adapted for Helm templ. system (Jan/2021)    #
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

{{- if .Values.microservices }}
# # # # # # # # # # # # # 
# Account µService      #
# # # # # # # # # # # # # 
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    DeploymentName: accounts-service
  name: accounts-service
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      DeploymentName: accounts-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      # annotations:
      #   prometheus.io/path: '/metrics'
      #   prometheus.io/scrape: 'true'
      #   prometheus.io/port: '9100'
      labels:
        DeploymentName: accounts-service
    spec:
      containers:
      - name: accounts-service
        image: rocketchat/account-service:3.17.0
        env:
        {{- if .Values.existingMongodbSecret }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-oplog-uri
        {{- else }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-oplog-uri
        {{- end }}
        - name: TRANSPORTER
          value: nats://nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: info
        - name: HEARTBEAT_INTERVAL
          value: '10'
        - name: HEARTBEAT_TIMEOUT
          value: '30'
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: 'true'
        - name: SKIP_PROCESS_EVENT_REGISTRATION
          value: 'false'
        # - name: BALANCE_STRATEGY
        #   value: CpuUsage
        # imagePullPolicy: Always
      tolerations:
        - key: node-type
          operator: Equal
          value: app
          effect: NoSchedule
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: accounts-service
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9458"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    DeploymentName: accounts-service

# # # # # # # # # # # # # # 
# Authorization µService  #
# # # # # # # # # # # # # # 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    DeploymentName: authorization-service
  name: authorization-service
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      DeploymentName: authorization-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      # annotations:
      #   prometheus.io/path: '/metrics'
      #   prometheus.io/scrape: 'true'
      #   prometheus.io/port: '9100'
      labels:
        DeploymentName: authorization-service
    spec:
      containers:
      - name: authorization-service
        image: rocketchat/authorization-service:3.17.0
        env:
        {{- if .Values.existingMongodbSecret }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-oplog-uri
        {{- else }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-oplog-uri
        {{- end }}
        - name: TRANSPORTER
          value: nats://nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: info
        - name: HEARTBEAT_INTERVAL
          value: '10'
        - name: HEARTBEAT_TIMEOUT
          value: '30'
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: 'true'
        - name: SKIP_PROCESS_EVENT_REGISTRATION
          value: 'false'
        # - name: BALANCE_STRATEGY
        #   value: CpuUsage
        # imagePullPolicy: Always
      tolerations:
        - key: node-type
          operator: Equal
          value: app
          effect: NoSchedule
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: authorization-service
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9458"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    DeploymentName: authorization-service

# # # # # # # # # # # # # 
# DDP Streamer µService #
# # # # # # # # # # # # # 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    DeploymentName: ddp-streamer
  name: ddp-streamer
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      DeploymentName: ddp-streamer
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      # annotations:
      #   prometheus.io/path: '/metrics'
      #   prometheus.io/scrape: 'true'
      #   prometheus.io/port: '9100'
      labels:
        DeploymentName: ddp-streamer
    spec:
      containers:
      - name: ddp-streamer
        image: rocketchat/ddp-streamer-service:3.17.0
        env:
        {{- if .Values.existingMongodbSecret }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-oplog-uri
        {{- else }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-oplog-uri
        {{- end }}
        - name: TRANSPORTER
          value: nats://nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: info
        - name: PORT
          value: '3000'
        - name: HEARTBEAT_INTERVAL
          value: '10'
        - name: HEARTBEAT_TIMEOUT
          value: '30'
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: 'true'
        - name: SKIP_PROCESS_EVENT_REGISTRATION
          value: 'false'
        # - name: BALANCE_STRATEGY
        #   value: CpuUsage
        # imagePullPolicy: Always
      tolerations:
        - key: node-type
          operator: Equal
          value: app
          effect: NoSchedule
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---

apiVersion: v1
kind: Service
metadata:
  name: ddp-streamer
  annotations:
    traefik.backend.circuitbreaker: NetworkErrorRatio() > 0.5
    traefik.backend.loadbalancer.method: drr
    traefik.ingress.kubernetes.io/affinity: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "9458"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
  - name: http
    targetPort: 3000
    port: 3000
    protocol: TCP
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    DeploymentName: ddp-streamer

# TODO: rewrite this
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    cert-manager.io/cluster-issuer: production-cert-issuer
  name: ddp-streamer-route
spec:
  entryPoints:
    - web
    - websecure
  routes:
  - match: Host(`{{ .Values.host }}`) && (PathPrefix(`/sockjs`) || PathPrefix(`/websocket`))
    kind: Rule
    services:
    - name: ddp-streamer
      port: 3000
      sticky:
        cookie:
          httpOnly: true
          name: cookie
          secure: true
          sameSite: none
      strategy: RoundRobin
      weight: 10
#  tls:
#    secretName: bench-rocket-chat-tls

# # # # # # # # # # # # # 
# NATS Service Entry    #
# # # # # # # # # # # # # 

---
apiVersion: v1
kind: Service
metadata:
  name: nats-svc
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "7777"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    targetPort: 7777
    port: 7777
  - name: metrics
    targetPort: 8080
    port: 8080
  selector:
    app: nats

# # # # # # # # # # # # # 
# NATS Stateful Set     #
# # # # # # # # # # # # # 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nats-config
data:
  nats.conf: |
    pid_file: "/var/run/nats/nats.pid"
    http: 8222
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  labels:
    app: nats
  annotations:
    prometheus.io/path: '/metrics'
    prometheus.io/scrape: 'true'
    prometheus.io/port: '7777'
spec:
  selector:
    app: nats
  clusterIP: None
  ports:
  - name: client
    port: 4222
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
  - name: gateways
    port: 7522
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  labels:
    app: nats
  annotations:
    prometheus.io/path: '/metrics'
    prometheus.io/scrape: 'true'
    prometheus.io/port: '7777'
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 1
  serviceName: "nats"
  template:
    metadata:
      labels:
        app: nats
    spec:
      # Common volumes for the containers
      volumes:
      - name: config-volume
        configMap:
          name: nats-config
      - name: pid
        emptyDir: {}

      # Required to be able to HUP signal and apply config reload
      # to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats-exporter
        image: synadia/prometheus-nats-exporter:latest
        ports:
        - containerPort: 7777
          name: metrics
        command:
         - "/prometheus-nats-exporter"
         - "-varz"
         - "-channelz"
         - "-connz"
         - "http://127.0.0.1:8222"
      - name: nats
        image: nats:2.1.8-alpine3.11
        ports:
        - containerPort: 4222
          name: client
          hostPort: 4222
        - containerPort: 7422
          name: leafnodes
          hostPort: 7422
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics
        command:
         - "nats-server"
         - "--config"
         - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).nats.$(POD_NAMESPACE).svc
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: pid
            mountPath: /var/run/nats

        # Liveness/Readiness probes against the monitoring
        #
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # Using the alpine based NATS image, we add an extra sleep that is
              # the same amount as the terminationGracePeriodSeconds to allow
              # the NATS Server to gracefully terminate the client connections.
              #
              command: ["/bin/sh", "-c", "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]
      tolerations:
        - key: node-type
          operator: Equal
          value: db
          effect: NoSchedule

# # # # # # # # # # # # # 
# Presence µService     #
# # # # # # # # # # # # # 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    DeploymentName: presence-service
  name: presence-service
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      DeploymentName: presence-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      # annotations:
      #   prometheus.io/path: '/metrics'
      #   prometheus.io/scrape: 'true'
      #   prometheus.io/port: '9100'
      labels:
        DeploymentName: presence-service
    spec:
      containers:
      - name: presence-service
        image: rocketchat/presence-service:3.17.0
        env:
        {{- if .Values.existingMongodbSecret }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-oplog-uri
        {{- else }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-oplog-uri
        {{- end }}
        - name: TRANSPORTER
          value: nats://nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: info
        - name: HEARTBEAT_INTERVAL
          value: '10'
        - name: HEARTBEAT_TIMEOUT
          value: '30'
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: 'true'
        - name: SKIP_PROCESS_EVENT_REGISTRATION
          value: 'false'
        # - name: BALANCE_STRATEGY
        #   value: CpuUsage
        # imagePullPolicy: Always
      tolerations:
        - key: node-type
          operator: Equal
          value: app
          effect: NoSchedule
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: presence-service
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9458"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    DeploymentName: presence-service

# # # # # # # # # # # # # 
# Stream Hub µService   #
# # # # # # # # # # # # # 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    DeploymentName: stream-hub
  name: stream-hub
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      DeploymentName: stream-hub
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      # annotations:
      #   prometheus.io/path: '/metrics'
      #   prometheus.io/scrape: 'true'
      #   prometheus.io/port: '9100'
      labels:
        DeploymentName: stream-hub
    spec:
      containers:
      - name: stream-hub
        image: rocketchat/stream-hub-service:3.17.0
        env:
        {{- if .Values.existingMongodbSecret }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingMongodbSecret }}
              key: mongo-oplog-uri
        {{- else }}
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-uri
        - name: MONGO_OPLOG_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "rocketchat.fullname" . }}
              key: mongo-oplog-uri
        {{- end }}
        - name: TRANSPORTER
          value: nats://nats:4222
        - name: MOLECULER_LOG_LEVEL
          value: info
        - name: HEARTBEAT_INTERVAL
          value: '10'
        - name: HEARTBEAT_TIMEOUT
          value: '30'
        - name: RETRY_ENABLED
          value: 'yes'
        - name: MS_METRICS
          value: 'true'
        - name: SKIP_PROCESS_EVENT_REGISTRATION
          value: 'false'
        # - name: BALANCE_STRATEGY
        #   value: CpuUsage
        # imagePullPolicy: Always
      tolerations:
        - key: node-type
          operator: Equal
          value: app
          effect: NoSchedule
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: stream-hub
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9458"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    targetPort: 9458
    port: 9458
    protocol: TCP
  selector:
    DeploymentName: stream-hub
{{end}} # End of "microservices" condition
